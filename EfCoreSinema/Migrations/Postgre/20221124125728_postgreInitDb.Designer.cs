// <auto-generated />
using System;
using EfCoreSinema.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EfCoreSinema.Migrations.Postgre
{
    [DbContext(typeof(PostgreContext))]
    [Migration("20221124125728_postgreInitDb")]
    partial class postgreInitDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EfCoreSinema.Entities.Concrete.Film", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("44926a00-2c7e-4a30-a0a0-a9cdcf72e0d6"));

                    b.Property<string>("Aciklama")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FilmAdi")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<short?>("FilmSuresi")
                        .HasColumnType("smallint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Filmler");
                });

            modelBuilder.Entity("EfCoreSinema.Entities.Concrete.Gosterim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("cce8fe78-9e4c-40cc-81f4-7cc03bc01beb"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FilmId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("HaftaId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SalonId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SeansId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("SalonId");

                    b.HasIndex("SeansId");

                    b.HasIndex("HaftaId", "SalonId", "FilmId", "SeansId")
                        .IsUnique();

                    b.ToTable("Gosterimler");
                });

            modelBuilder.Entity("EfCoreSinema.Entities.Concrete.Hafta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("18d3684e-5f0e-47f3-a3f6-1fb6549672c9"));

                    b.Property<DateTime?>("Baslangic")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Bitis")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HaftaAdi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Haftalar");
                });

            modelBuilder.Entity("EfCoreSinema.Entities.Concrete.Kategori", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("a73d6dd4-72a6-4f3a-a931-768fb7690195"));

                    b.Property<string>("Aciklama")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("KategoriAdi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("KategoriAdi")
                        .IsUnique();

                    b.ToTable("Kategoriler");
                });

            modelBuilder.Entity("EfCoreSinema.Entities.Concrete.Salon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("6cefffed-343c-4a9c-aa54-e258d4ea74d1"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte?>("Kapasite")
                        .HasColumnType("smallint");

                    b.Property<string>("SalonAdi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Salonlar");
                });

            modelBuilder.Entity("EfCoreSinema.Entities.Concrete.Seans", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("bfb1972e-4289-4b10-8c55-1796439df941"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SeansAdi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Seanslar");
                });

            modelBuilder.Entity("FilmKategori", b =>
                {
                    b.Property<Guid>("FilmlerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("KategorilerId")
                        .HasColumnType("uuid");

                    b.HasKey("FilmlerId", "KategorilerId");

                    b.HasIndex("KategorilerId");

                    b.ToTable("FilmKategori");
                });

            modelBuilder.Entity("EfCoreSinema.Entities.Concrete.Gosterim", b =>
                {
                    b.HasOne("EfCoreSinema.Entities.Concrete.Film", "Film")
                        .WithMany("Gosterimleri")
                        .HasForeignKey("FilmId");

                    b.HasOne("EfCoreSinema.Entities.Concrete.Hafta", "Hafta")
                        .WithMany("Gosterimler")
                        .HasForeignKey("HaftaId");

                    b.HasOne("EfCoreSinema.Entities.Concrete.Salon", "Salon")
                        .WithMany("Gosterimler")
                        .HasForeignKey("SalonId");

                    b.HasOne("EfCoreSinema.Entities.Concrete.Seans", "Seans")
                        .WithMany("Gosterimler")
                        .HasForeignKey("SeansId");

                    b.Navigation("Film");

                    b.Navigation("Hafta");

                    b.Navigation("Salon");

                    b.Navigation("Seans");
                });

            modelBuilder.Entity("FilmKategori", b =>
                {
                    b.HasOne("EfCoreSinema.Entities.Concrete.Film", null)
                        .WithMany()
                        .HasForeignKey("FilmlerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EfCoreSinema.Entities.Concrete.Kategori", null)
                        .WithMany()
                        .HasForeignKey("KategorilerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EfCoreSinema.Entities.Concrete.Film", b =>
                {
                    b.Navigation("Gosterimleri");
                });

            modelBuilder.Entity("EfCoreSinema.Entities.Concrete.Hafta", b =>
                {
                    b.Navigation("Gosterimler");
                });

            modelBuilder.Entity("EfCoreSinema.Entities.Concrete.Salon", b =>
                {
                    b.Navigation("Gosterimler");
                });

            modelBuilder.Entity("EfCoreSinema.Entities.Concrete.Seans", b =>
                {
                    b.Navigation("Gosterimler");
                });
#pragma warning restore 612, 618
        }
    }
}
